#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

#define MAX_PROCESSES 100

typedef struct {
    int processID;
    int arrivalTime;
    int burstTime;
    int waitingTime;
    int turnaroundTime;
    int nextBurstTime;
} Process;

void calculateWaitingAndTurnaroundTime(Process processes[], int n) {
    int totalWaitingTime = 0;
    int totalTurnaroundTime = 0;

    // Calculate waiting time and turnaround time
    for (int i = 0; i < n; i++) {
        processes[i].turnaroundTime = processes[i].burstTime + processes[i].waitingTime;
        totalTurnaroundTime += processes[i].turnaroundTime;
        totalWaitingTime += processes[i].waitingTime;
    }

    // Print waiting and turnaround times
    printf("\nProcess\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\n", processes[i].processID, processes[i].waitingTime, processes[i].turnaroundTime);
    }

    printf("\nAverage Waiting Time: %.2f", (float)totalWaitingTime / n);
    printf("\nAverage Turnaround Time: %.2f\n", (float)totalTurnaroundTime / n);
}

void generateNextBurstTime(Process *process) {
    // Simulate the generation of next CPU burst time
    process->nextBurstTime = rand() % 10 + 1; // Generate a random burst time between 1 and 10
}

int main() {
    int n;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    Process processes[MAX_PROCESSES];
    for (int i = 0; i < n; i++) {
        processes[i].processID = i + 1; // Process ID starts from 1
        printf("Enter arrival time for Process %d: ", i + 1);
        scanf("%d", &processes[i].arrivalTime);
        printf("Enter CPU burst time for Process %d: ", i + 1);
        scanf("%d", &processes[i].burstTime);
        processes[i].waitingTime = 0; // Initialize waiting time to 0
        generateNextBurstTime(&processes[i]); // Generate next CPU burst
    }

    // Sort processes by arrival time and burst time (SJF non-preemptive)
    for (int i = 0; i < n - 1; i++) {
        for (int j = i + 1; j < n; j++) {
            if ((processes[i].arrivalTime > processes[j].arrivalTime) ||
                (processes[i].arrivalTime == processes[j].arrivalTime && processes[i].burstTime > processes[j].burstTime)) {
                Process temp = processes[i];
                processes[i] = processes[j];
                processes[j] = temp;
            }
        }
    }

    // Gantt chart calculation
    int currentTime = 0;
    printf("\nGantt Chart:\n");
    for (int i = 0; i < n; i++) {
        if (currentTime < processes[i].arrivalTime) {
            currentTime = processes[i].arrivalTime; // If the CPU is idle
        }

        processes[i].waitingTime = currentTime - processes[i].arrivalTime;
        printf("P%d ", processes[i].processID); // Print process ID in Gantt chart
        currentTime += processes[i].burstTime + 2; // Add burst time and I/O wait time
    }
    printf("\n");

    // Calculate waiting time and turnaround time
    calculateWaitingAndTurnaroundTime(processes, n);

    return 0;
}

/*
Output

Enter the number of processes: 3
Enter arrival time for Process 1: 0
Enter CPU burst time for Process 1: 5
Enter arrival time for Process 2: 1
Enter CPU burst time for Process 2: 3
Enter arrival time for Process 3: 2
Enter CPU burst time for Process 3: 2

Gantt Chart:
P1 P2 P3
Process	Waiting Time	Turnaround Time
1	0		5
2	4		7
3	5		7

Average Waiting Time: 3.00
Average Turnaround Time: 6.33

*/