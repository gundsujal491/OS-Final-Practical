#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>

int main() {
    pid_t pid;

    // Create a child process
    pid = fork();

    if (pid < 0) {
        // Fork failed
        perror("Fork failed");
        exit(EXIT_FAILURE);
    }
    else if (pid == 0) {
        // Child process
        printf("Child process (PID: %d) is executing the 'ls' command...\n", getpid());
        
        // Execute the 'ls' command using execl()
        execl("/bin/ls", "ls", NULL);

        // If execl returns, there was an error
        perror("execl failed");
        exit(EXIT_FAILURE);
    }
    else {
        // Parent process
        printf("Parent process (PID: %d) is going to sleep...\n", getpid());
        
        // Sleep for 5 seconds
        sleep(5);

        // Optionally wait for the child process to complete
        wait(NULL);
        printf("Parent process (PID: %d) has woken up and is exiting.\n", getpid());
    }

    return 0;
}

/*
Output

Parent process (PID: 1234) is going to sleep...
Child process (PID: 1235) is executing the 'ls' command...
file1.txt
file2.txt
file3.txt
Parent process (PID: 1234) has woken up and is exiting.
*/