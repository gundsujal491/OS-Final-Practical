#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>

int main() {
    pid_t pid = fork();  // Create a child process

    if (pid < 0) {
        // Fork failed
        perror("Fork failed");
        exit(1);
    } else if (pid == 0) {
        // Child process
        printf("Child process (PID: %d) is executing the 'ls' command...\n", getpid());
        
        // Execute the 'ls' command
        execl("/bin/ls", "ls", NULL);
        
        // If execl() fails
        perror("execl failed");
        exit(1);
    } else {
        // Parent process
        printf("Parent process (PID: %d) is going to sleep...\n", getpid());
        
        // Make the parent process sleep for 5 seconds
        sleep(5);
        
        printf("Parent process (PID: %d) woke up!\n", getpid());
        
        // Optionally wait for the child process to finish
        wait(NULL);
        printf("Child process has finished execution.\n");
    }

    return 0;
}

/*
Output

Parent process (PID: 12345) is going to sleep...
Child process (PID: 12346) is executing the 'ls' command...
file1.txt
file2.txt
file3.txt
Parent process (PID: 12345) woke up!
Child process has finished execution.

*/