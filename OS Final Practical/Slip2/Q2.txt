#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define MAX_PROCESSES 10
#define IO_WAIT 2 // Fixed I/O waiting time

typedef struct {
    int pid;             // Process ID
    int arrival_time;    // Arrival time
    int cpu_burst;       // Initial CPU burst time
    int start_time;      // Start time in the Gantt chart
    int end_time;        // End time in the Gantt chart
    int turnaround_time; // Turnaround time
    int waiting_time;    // Waiting time
} Process;

void calculateTimes(Process processes[], int n) {
    int current_time = 0;
    int completed = 0;
    int total_turnaround_time = 0;
    int total_waiting_time = 0;

    while (completed < n) {
        int min_index = -1;
        int min_burst = 10000;

        // Find the process with the shortest CPU burst time that has arrived
        for (int i = 0; i < n; i++) {
            if (processes[i].arrival_time <= current_time && processes[i].end_time == 0) {
                if (processes[i].cpu_burst < min_burst) {
                    min_burst = processes[i].cpu_burst;
                    min_index = i;
                }
            }
        }

        if (min_index == -1) {
            current_time++;
            continue;
        }

        // Process the selected job
        processes[min_index].start_time = current_time;
        processes[min_index].end_time = current_time + processes[min_index].cpu_burst;
        processes[min_index].turnaround_time = processes[min_index].end_time - processes[min_index].arrival_time;
        processes[min_index].waiting_time = processes[min_index].turnaround_time - processes[min_index].cpu_burst;

        current_time = processes[min_index].end_time + IO_WAIT;
        completed++;

        total_turnaround_time += processes[min_index].turnaround_time;
        total_waiting_time += processes[min_index].waiting_time;
    }

    // Calculate and display average times
    printf("\nProcess\tArrival Time\tBurst Time\tStart Time\tEnd Time\tTurnaround Time\tWaiting Time\n");
    for (int i = 0; i < n; i++) {
        printf("P%d\t%d\t\t%d\t\t%d\t\t%d\t\t%d\t\t%d\n", processes[i].pid,
               processes[i].arrival_time, processes[i].cpu_burst, processes[i].start_time,
               processes[i].end_time, processes[i].turnaround_time, processes[i].waiting_time);
    }

    printf("\nAverage Turnaround Time: %.2f\n", (float)total_turnaround_time / n);
    printf("Average Waiting Time: %.2f\n", (float)total_waiting_time / n);
}

int main() {
    srand(time(0));
    Process processes[MAX_PROCESSES];
    int n;

    // Input number of processes
    printf("Enter number of processes (up to %d): ", MAX_PROCESSES);
    scanf("%d", &n);

    // Input arrival times and initial CPU bursts
    for (int i = 0; i < n; i++) {
        processes[i].pid = i + 1;
        printf("Enter arrival time for Process P%d: ", i + 1);
        scanf("%d", &processes[i].arrival_time);

        printf("Enter initial CPU burst time for Process P%d: ", i + 1);
        scanf("%d", &processes[i].cpu_burst);

        processes[i].start_time = 0;
        processes[i].end_time = 0;
    }

    // Simulate scheduling using SJF (non-preemptive)
    calculateTimes(processes, n);

    return 0;
}


/*
Input

Enter number of processes (up to 10): 4
Enter arrival time for Process P1: 0
Enter initial CPU burst time for Process P1: 6
Enter arrival time for Process P2: 2
Enter initial CPU burst time for Process P2: 8
Enter arrival time for Process P3: 4
Enter initial CPU burst time for Process P3: 7
Enter arrival time for Process P4: 5
Enter initial CPU burst time for Process P4: 3

Output

Process Arrival Time  Burst Time  Start Time  End Time  Turnaround Time  Waiting Time
P1      0             6          0           6         6               0
P4      5             3          8           11        6               3
P3      4             7          13          20        16              9
P2      2             8          22          30        28              20

Average Turnaround Time: 14.00
Average Waiting Time: 8.00

*/