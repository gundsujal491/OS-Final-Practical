#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

#define MAX_PROCESSES 10

typedef struct {
    int process_id;
    int arrival_time;
    int burst_time;
    int priority;
    int waiting_time;
    int turnaround_time;
} Process;

void sortProcesses(Process proc[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (proc[j].arrival_time > proc[j + 1].arrival_time || 
               (proc[j].arrival_time == proc[j + 1].arrival_time && proc[j].priority > proc[j + 1].priority)) {
                // Swap processes
                Process temp = proc[j];
                proc[j] = proc[j + 1];
                proc[j + 1] = temp;
            }
        }
    }
}

void calculateWaitingTime(Process proc[], int n) {
    int completion_time[MAX_PROCESSES];
    completion_time[0] = proc[0].arrival_time + proc[0].burst_time;
    proc[0].turnaround_time = completion_time[0] - proc[0].arrival_time;
    proc[0].waiting_time = proc[0].turnaround_time - proc[0].burst_time;

    for (int i = 1; i < n; i++) {
        completion_time[i] = completion_time[i - 1] + proc[i].burst_time + 2; // +2 for I/O wait time
        proc[i].turnaround_time = completion_time[i] - proc[i].arrival_time;
        proc[i].waiting_time = proc[i].turnaround_time - proc[i].burst_time;
    }
}

void printGanttChart(Process proc[], int n) {
    printf("\nGantt Chart:\n|");
    for (int i = 0; i < n; i++) {
        printf(" P%d |", proc[i].process_id);
    }
    printf("\n");

    int time = proc[0].arrival_time;
    for (int i = 0; i < n; i++) {
        time += proc[i].burst_time + (i > 0 ? 2 : 0); // Add I/O wait time for subsequent processes
        printf("%d\t", time);
    }
    printf("\n");
}

int main() {
    Process proc[MAX_PROCESSES];
    int n;

    printf("Enter the number of processes (max %d): ", MAX_PROCESSES);
    scanf("%d", &n);

    // Input process details
    for (int i = 0; i < n; i++) {
        proc[i].process_id = i + 1; // Process ID starting from 1
        printf("Enter arrival time, burst time, and priority for Process %d: ", proc[i].process_id);
        scanf("%d %d %d", &proc[i].arrival_time, &proc[i].burst_time, &proc[i].priority);
    }

    // Sort processes based on arrival time and priority
    sortProcesses(proc, n);

    // Calculate waiting time and turnaround time
    calculateWaitingTime(proc, n);

    // Calculate average waiting time and turnaround time
    float avg_waiting_time = 0, avg_turnaround_time = 0;
    for (int i = 0; i < n; i++) {
        avg_waiting_time += proc[i].waiting_time;
        avg_turnaround_time += proc[i].turnaround_time;
    }
    avg_waiting_time /= n;
    avg_turnaround_time /= n;

    // Print results
    printf("\nProcess\tArrival\tBurst\tPriority\tWaiting\tTurnaround\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t%d\t%d\t\t%d\t%d\n", proc[i].process_id, proc[i].arrival_time, 
               proc[i].burst_time, proc[i].priority, proc[i].waiting_time, proc[i].turnaround_time);
    }

    printf("\nAverage Waiting Time: %.2f", avg_waiting_time);
    printf("\nAverage Turnaround Time: %.2f\n", avg_turnaround_time);

    // Print Gantt chart
    printGanttChart(proc, n);

    return 0;
}

/*
Output

Enter the number of processes (max 10): 3
Enter arrival time, burst time, and priority for Process 1: 0 8 2
Enter arrival time, burst time, and priority for Process 2: 1 4 1
Enter arrival time, burst time, and priority for Process 3: 2 9 3

Process    Arrival    Burst    Priority    Waiting    Turnaround
1          0         8       2           0          8
2          1         4       1           7          11
3          2         9       3           11         20

Average Waiting Time: 6.00
Average Turnaround Time: 13.00

Gantt Chart:
| P1 | P2 | P3 |
8	12	20

*/