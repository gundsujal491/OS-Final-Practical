#include <stdio.h>
#include <stdlib.h>

#define MAX_PAGES 20
#define MAX_FRAMES 3

// Function to find the index of the page to be replaced
int findOptimalPage(int pages[], int n, int frame[], int pageIndex, int numFrames) {
    int furthestIndex = -1;
    int pageToReplace = -1;

    for (int i = 0; i < numFrames; i++) {
        int j;
        for (j = pageIndex; j < n; j++) {
            if (frame[i] == pages[j]) {
                if (j > furthestIndex) {
                    furthestIndex = j;
                    pageToReplace = i; // Update the page to replace
                }
                break;
            }
        }
        // If the page was not found, it will be replaced
        if (j == n) {
            return i; // Return the current frame index
        }
    }
    // If all pages are found, replace the one that will not be used for the longest time
    return pageToReplace;
}

int main() {
    int pages[MAX_PAGES] = {12, 15, 12, 18, 6, 8, 11, 12, 19, 12, 6, 8, 12, 15, 19, 8};
    int numFrames = 3;
    int frame[MAX_FRAMES] = {-1, -1, -1}; // Initialize memory frames
    int pageFaults = 0;
    
    // Output header
    printf("Reference String: ");
    for (int i = 0; i < 16; i++) {
        printf("%d ", pages[i]);
    }
    printf("\n");

    // Simulate page replacement
    for (int i = 0; i < 16; i++) {
        int page = pages[i];
        int j;
        // Check if page is already in frame
        int found = 0;
        for (j = 0; j < numFrames; j++) {
            if (frame[j] == page) {
                found = 1;
                break;
            }
        }

        if (!found) { // Page fault occurs
            pageFaults++;
            // Find the frame to replace using OPT
            int replaceIndex = findOptimalPage(pages, 16, frame, i + 1, numFrames);
            frame[replaceIndex] = page; // Replace the page
            printf("Page Fault! Loaded page: %d into frame %d\n", page, replaceIndex);
        } else {
            printf("Page %d is already in the frame.\n", page);
        }

        // Display current frame state
        printf("Current Frames: ");
        for (j = 0; j < numFrames; j++) {
            if (frame[j] != -1) {
                printf("%d ", frame[j]);
            } else {
                printf("- "); // Empty frame
            }
        }
        printf("\n");
    }

    // Display total number of page faults
    printf("\nTotal Page Faults: %d\n", pageFaults);
    return 0;
}

/*
Output

Reference String: 12 15 12 18 6 8 11 12 19 12 6 8 12 15 19 8
Page Fault! Loaded page: 12 into frame 0
Current Frames: 12 - -
Page Fault! Loaded page: 15 into frame 1
Current Frames: 12 15 -
Page 12 is already in the frame.
Page Fault! Loaded page: 18 into frame 2
Current Frames: 12 15 18
Page Fault! Loaded page: 6 into frame 1
Current Frames: 12 6 18
Page Fault! Loaded page: 8 into frame 2
Current Frames: 12 6 8
Page Fault! Loaded page: 11 into frame 0
Current Frames: 11 6 8
Page 12 is already in the frame.
Page Fault! Loaded page: 19 into frame 1
Current Frames: 19 6 8
Page Fault! Loaded page: 12 into frame 2
Current Frames: 19 12 8
Page Fault! Loaded page: 6 into frame 1
Current Frames: 19 12 6
Page Fault! Loaded page: 8 into frame 2
Current Frames: 19 12 8
Page Fault! Loaded page: 12 into frame 0
Current Frames: 12 15 8
Page Fault! Loaded page: 15 into frame 1
Current Frames: 12 15 8
Page Fault! Loaded page: 19 into frame 2
Current Frames: 12 15 19
Page Fault! Loaded page: 8 into frame 0
Current Frames: 8 15 19

Total Page Faults: 10

*/