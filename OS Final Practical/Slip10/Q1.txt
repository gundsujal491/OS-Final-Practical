#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <time.h>

int main() {
    pid_t pid = fork(); // Create a child process

    if (pid < 0) {
        // Fork failed
        perror("Fork failed");
        exit(1);
    } else if (pid == 0) {
        // Child process
        printf("Child Process: PID = %d, Parent PID = %d\n", getpid(), getppid());

        // Simulate some work in the child process
        printf("Child Process: Sleeping for 10 seconds...\n");
        sleep(10); // Sleep for 10 seconds

        // After sleeping, check the parent process ID
        printf("Child Process: My parent (PID = %d) has terminated.\n", getppid());
        printf("Child Process: I am now an orphan process.\n");
    } else {
        // Parent process
        printf("Parent Process: PID = %d\n", getpid());

        // Simulate some work in the parent process
        printf("Parent Process: Sleeping for 2 seconds...\n");
        sleep(2); // Sleep for 2 seconds

        // Parent process terminates
        printf("Parent Process: Terminating...\n");
        exit(0);
    }

    return 0;
}

/*
Output

Parent Process: PID = 12345
Child Process: PID = 12346, Parent PID = 12345
Parent Process: Sleeping for 2 seconds...
Parent Process: Terminating...
Child Process: Sleeping for 10 seconds...
Child Process: My parent (PID = 12345) has terminated.
Child Process: I am now an orphan process.

*/