#include <stdio.h>
#include <stdlib.h>

#define MAX_PROCESSES 10
#define MAX_RESOURCES 10

int main() {
    int n, m; // n = number of processes, m = number of resources
    int max[MAX_PROCESSES][MAX_RESOURCES]; // Maximum resource needs of processes
    int allot[MAX_PROCESSES][MAX_RESOURCES]; // Allocated resources of processes
    int need[MAX_PROCESSES][MAX_RESOURCES]; // Remaining needs of processes
    int totalResources[MAX_RESOURCES]; // Total number of resources available
    int minResources[MAX_RESOURCES]; // Minimum resources needed to avoid deadlock

    // Input number of processes and resources
    printf("Enter number of processes: ");
    scanf("%d", &n);
    printf("Enter number of resources: ");
    scanf("%d", &m);

    // Input maximum resource needs for each process
    printf("Enter maximum resources needs for each process:\n");
    for (int i = 0; i < n; i++) {
        printf("Process %d: ", i);
        for (int j = 0; j < m; j++) {
            scanf("%d", &max[i][j]);
        }
    }

    // Input currently allocated resources for each process
    printf("Enter currently allocated resources for each process:\n");
    for (int i = 0; i < n; i++) {
        printf("Process %d: ", i);
        for (int j = 0; j < m; j++) {
            scanf("%d", &allot[i][j]);
        }
    }

    // Calculate the need matrix
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            need[i][j] = max[i][j] - allot[i][j];
        }
    }

    // Calculate the total resources available in the system
    printf("Enter total resources available (space-separated): ");
    for (int j = 0; j < m; j++) {
        scanf("%d", &totalResources[j]);
    }

    // Calculate the minimum resources needed to avoid deadlock
    for (int j = 0; j < m; j++) {
        int maxNeed = 0;
        for (int i = 0; i < n; i++) {
            maxNeed += need[i][j]; // Sum of maximum needs of each process
        }
        minResources[j] = maxNeed - totalResources[j];
        if (minResources[j] < 0) {
            minResources[j] = 0; // If current resources are sufficient
        }
    }

    // Display the results
    printf("\nMinimum resources needed to avoid deadlock:\n");
    for (int j = 0; j < m; j++) {
        printf("Resource %d: %d\n", j, minResources[j]);
    }

    return 0;
}

/*Output

Enter number of processes: 3
Enter number of resources: 3
Enter maximum resources needs for each process:
Process 0: 7 5 3
Process 1: 3 2 2
Process 2: 9 0 2
Enter currently allocated resources for each process:
Process 0: 0 1 0
Process 1: 2 0 0
Process 2: 3 0 2
Enter total resources available (space-separated): 3 3 2

Minimum resources needed to avoid deadlock:
Resource 0: 2
Resource 1: 0
Resource 2: 0


*/