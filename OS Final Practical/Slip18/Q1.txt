#include <stdio.h>

void calculateNeed(int need[][10], int max[][10], int allocation[][10], int p, int r) {
    for (int i = 0; i < p; i++) {
        for (int j = 0; j < r; j++) {
            need[i][j] = max[i][j] - allocation[i][j];
        }
    }
}

void displayMatrix(int matrix[][10], int p, int r) {
    for (int i = 0; i < p; i++) {
        for (int j = 0; j < r; j++) {
            printf("%d ", matrix[i][j]);
        }
        printf("\n");
    }
}

int main() {
    int p, r;
    int allocation[10][10], max[10][10], need[10][10];

    // Accepting the number of processes and resources
    printf("Enter the number of processes: ");
    scanf("%d", &p);
    printf("Enter the number of resources: ");
    scanf("%d", &r);

    // Accepting the allocation matrix
    printf("Enter the Allocation Matrix:\n");
    for (int i = 0; i < p; i++) {
        printf("Process %d: ", i + 1);
        for (int j = 0; j < r; j++) {
            scanf("%d", &allocation[i][j]);
        }
    }

    // Accepting the maximum matrix
    printf("Enter the Maximum Matrix:\n");
    for (int i = 0; i < p; i++) {
        printf("Process %d: ", i + 1);
        for (int j = 0; j < r; j++) {
            scanf("%d", &max[i][j]);
        }
    }

    // Calculating the Need matrix
    calculateNeed(need, max, allocation, p, r);

    // Displaying the Need matrix
    printf("\nNeed Matrix:\n");
    displayMatrix(need, p, r);

    return 0;
}

/*Input

Enter the number of processes: 3
Enter the number of resources: 3
Enter the Allocation Matrix:
Process 1: 0 1 0
Process 2: 2 0 0
Process 3: 3 0 2
Enter the Maximum Matrix:
Process 1: 7 5 3
Process 2: 3 2 2
Process 3: 9 0 2

Output

Need Matrix:
7 4 3
1 2 2
6 0 0

*/