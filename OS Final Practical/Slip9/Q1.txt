#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>  // for fork(), execl(), sleep()
#include <sys/types.h>

int main() {
    pid_t pid = fork(); // Create a child process

    if (pid < 0) {
        // Fork failed
        perror("Fork failed");
        exit(1);
    }
    else if (pid == 0) {
        // Child process
        printf("Child Process: Executing 'ls' command...\n");
        // Execute the 'ls' command
        execl("/bin/ls", "ls", NULL);
        
        // If execl fails
        perror("execl failed");
        exit(1);
    }
    else {
        // Parent process
        printf("Parent Process: Going to sleep...\n");
        sleep(5); // Sleep for 5 seconds
        printf("Parent Process: Waking up after sleep.\n");
        
        // Optionally, wait for the child process to finish
        wait(NULL);
        printf("Parent Process: Child process has finished execution.\n");
    }

    return 0;
}

/*
Parent Process: Going to sleep...
Child Process: Executing 'ls' command...
file1.txt
file2.txt
directory1
directory2
Parent Process: Waking up after sleep.
Parent Process: Child process has finished execution.

*/